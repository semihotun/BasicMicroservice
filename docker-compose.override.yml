version: "3.4"

services:
  web.apigateway:
    container_name: web.apigateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:4100
      - ConsulConfig__Address=http://s_consul:8500
      - ConsulConfig__ServiceAddress=http://web.apigateway:4100
      - ConsulConfig__ServiceName=web.apigateway
      - ConsulConfig__ServiceId=web.apigateway
    ports:
      - "4100:4100"
    depends_on:
      - s_sqlserver
      - s_consul
      - s_rabbitmq     
    networks:
      - net_backendservices

  favoriteservice:
    container_name: favoriteservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5001
      - ConsulConfig__Address=http://s_consul:8500
      - ConsulConfig__ServiceAddress=http://favoriteservice:5001
      - ConsulConfig__ServiceName=favoriteservice
      - ConsulConfig__ServiceId=favoriteservice
    ports:
      - "5001:5001"
    depends_on:
      - s_sqlserver
      - s_consul
      - s_rabbitmq
      - web.apigateway
      - pageservice
    networks:
      - net_backendservices

  identityservice:
    container_name: identityservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:3000
      - ConsulConfig__Address=http://s_consul:8500
      - ConsulConfig__ServiceAddress=http://identityservice:3000
      - ConsulConfig__ServiceName=identityservice
      - ConsulConfig__ServiceId=identityservice
    ports:
      - "3000:3000"
    depends_on:
      - s_sqlserver
      - s_consul
      - s_rabbitmq
      - web.apigateway
    networks:
      - net_backendservices

  sitemapservice:
    container_name: sitemapservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5003
      - ConsulConfig__Address=http://s_consul:8500
      - ConsulConfig__ServiceAddress=http://sitemapservice:5003
      - ConsulConfig__ServiceName=sitemapservice
      - ConsulConfig__ServiceId=sitemapservice
    ports:
      - "5003:5003"
    depends_on:
      - s_sqlserver
      - s_consul
      - s_rabbitmq
      - web.apigateway
      - pageservice
    networks:
      - net_backendservices

  pageservice:
    container_name: pageservice
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5002
      - ConsulConfig__Address=http://s_consul:8500
      - ConsulConfig__ServiceAddress=http://pageservice:5002
      - ConsulConfig__ServiceName=pageservice
      - ConsulConfig__ServiceId=pageservice
    ports:
      - "5002:5002"
    depends_on:
      - s_sqlserver
      - s_consul
      - s_rabbitmq
      - web.apigateway
    networks:
      - net_backendservices

  s_consul:
    ports:
      - 8500:8500
      - 8600:8600/tcp
      - 8600:8600/udp
    networks:
      - net_frontend
      - net_backendservices

  s_rabbitmq:
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    networks:
      - net_backendservices
      - net_frontend

  s_redis:
    ports:
      - 6379:6379
    volumes:
      - /opt/app_data/redis/:/data
    networks:
      - net_backendservices

  s_sqlserver:
    user: root
    ports:
      - 1457:1433
    environment:
      - ACCEPT_EULA=sa
      - MSSQL_SA_PASSWORD=semihO123.
    volumes:
      - sqlserver_data:/var/opt/mssql/data
      - sqlserver_log:/var/opt/mssql/log
    networks:
      - net_backendservices

  s_nginx:
    container_name: c_nginx
    image: nginx
    ports:
      - 8070:80

  s_mongo:
    container_name: s_mongo
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: semihO123
    networks:
      - net_backendservices
    volumes:
      - ./graylog.js:/docker-entrypoint-initdb.d/graylog.js:ro

  s_mongo-express:
    container_name: s_mongo-express
    image: mongo-express
    restart: always
    ports:
      - 8888:8081
    environment:
      ME_CONFIG_MONGODB_SERVER: s_mongo
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: semihO123
      ME_CONFIG_BASICAUTH_USERNAME: root
      ME_CONFIG_BASICAUTH_PASSWORD: semihO123
      ME_CONFIG_MONGODB_URL: mongo://root:semihO123@s_mongo:27017
    networks:
      - net_backendservices
    depends_on:
      - s_mongo

  s_elasticsearch:
    container_name: s_elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - network.host=0.0.0.0
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g    
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - net_backendservices

  s_kibana:
    container_name: s_kibana
    image: docker.elastic.co/kibana/kibana:7.10.2
    environment:
      - ELASTICSEARCH_HOSTS=["http://s_elasticsearch:9200"]
      - elasticsearch.sniffOnStart=true
      - ES_JAVA_OPTS=-Xms3g -Xmx3g
      - xpack.infra.sources.default.metricAlias=metricbeat-*
      - XPACK_MONITORING_KIBANA_COLLECTION_ENABLED=true
    ports:
      - "5601:5601"
    depends_on:
      - s_elasticsearch
    networks:
      - net_backendservices
      
        
  s_graylog:
    container_name: s_graylog
    image: graylog/graylog:5.0
    environment:
      # UserName: admin
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_WEB_ENDPOINT_URI=http://+:9000/api
      - GRAYLOG_MONGODB_URI=mongodb://root:semihO123@s_mongo:27017/graylog
      - GRAYLOG_MESSAGE_JOURNAL_ENABLED=false
    links:
      - s_mongo:mongo
      - s_elasticsearch:elasticsearch
    depends_on:
      - s_mongo
      - s_elasticsearch
    ports:
      - 9000:9000 # Graylog web interface and REST API
      # GELF TCP
      - 12201:12201
      # Syslog UDP
      - 1514:1514/udp
    networks:
      - net_backendservices
        

  webapp:
    ports:
      - 80:80
    networks:
      - net_frontend


networks:
  net_frontend:
    driver: bridge
    external: true
  net_backendservices:
    driver: bridge
    external: true

volumes:
  rabbitmq:
  sqlserver_data:
  sqlserver_log:
